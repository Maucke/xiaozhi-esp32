/**
 * @file BOE_48_1504FN.h
 * @brief This header file defines the BOE_48_1504FN class, which is used to control the display of a specific device and inherits from the PT6302 class.
 *
 * This class provides a series of methods for displaying spectrum, numbers, symbols, dot matrix and other information, and also supports animation effects.
 *
 * @author Shihua Feng
 * @date February 18, 2025
 */

#ifndef _BOE_48_1504FN_H_
#define _BOE_48_1504FN_H_

#include "pt6302.h"
#include <cmath>
#include <esp_wifi.h>

// Define the number of characters
#define CHAR_COUNT (95 + 1)

/**
 * @class BOE_48_1504FN
 * @brief This class inherits from the PT6302 class and is used to control the display of a specific device.
 *
 * It provides methods for displaying spectrum, numbers, symbols, dot matrix and other information, and also supports animation effects.
 */
class BOE_48_1504FN : protected PT6302
{
#define BUFFER_SIZE 256
#define DISPLAY_SIZE 10
public:
    typedef enum
    {
        NONE = -1,
        UP2DOWN,
        DOWN2UP,
        LEFT2RT,
        RT2LEFT,
        MAX
    } NumAni;

private:
    typedef struct
    {
        char current_content;
        char last_content;
        int animation_step;
        NumAni animation_type;
        bool need_update;
    } ContentData;

    typedef struct
    {
        char buffer[BUFFER_SIZE + 1]; // +1 for null terminator
        int start_pos;
        int length;
    } CircularBuffer;

    // Hexadecimal code corresponding to each character
    // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz
    const uint8_t hex_codes[CHAR_COUNT][5] = {
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*" ", 32(ASCII)*/
        {0x00, 0x00, 0x79, 0x00, 0x00}, /*"!", 33(ASCII)*/
        {0x00, 0x60, 0x00, 0x60, 0x00}, /*""", 34(ASCII)*/
        {0x22, 0x7F, 0x22, 0x7F, 0x22}, /*"#", 35(ASCII)*/
        {0x12, 0x2A, 0x7F, 0x2A, 0x24}, /*"$", 36(ASCII)*/
        {0x62, 0x64, 0x08, 0x13, 0x23}, /*"%", 37(ASCII)*/
        {0x36, 0x49, 0x35, 0x02, 0x0D}, /*"&", 38(ASCII)*/
        {0x00, 0x20, 0x40, 0x00, 0x00}, /*"'", 39(ASCII)*/
        {0x00, 0x1C, 0x22, 0x41, 0x00}, /*"(", 40(ASCII)*/
        {0x00, 0x41, 0x22, 0x1C, 0x00}, /*")", 41(ASCII)*/
        {0x14, 0x08, 0x3E, 0x08, 0x14}, /*"*", 42(ASCII)*/
        {0x08, 0x08, 0x3E, 0x08, 0x08}, /*"+", 43(ASCII)*/
        {0x00, 0x01, 0x02, 0x00, 0x00}, /*",", 44(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"-", 45(ASCII)*/
        {0x00, 0x01, 0x00, 0x00, 0x00}, /*".", 46(ASCII)*/
        {0x02, 0x04, 0x08, 0x10, 0x20}, /*"/", 47(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, /*"0", 48(ASCII)*/
        {0x00, 0x20, 0x20, 0x7F, 0x00}, /*"1", 49(ASCII)*/
        {0x23, 0x45, 0x49, 0x49, 0x31}, /*"2", 50(ASCII)*/
        {0x22, 0x41, 0x49, 0x49, 0x36}, /*"3", 51(ASCII)*/
        {0x0C, 0x14, 0x24, 0x7F, 0x04}, /*"4", 52(ASCII)*/
        {0x72, 0x51, 0x51, 0x51, 0x4E}, /*"5", 53(ASCII)*/
        {0x1E, 0x29, 0x49, 0x49, 0x06}, /*"6", 54(ASCII)*/
        {0x40, 0x40, 0x47, 0x58, 0x60}, /*"7", 55(ASCII)*/
        {0x36, 0x49, 0x49, 0x49, 0x36}, /*"8", 56(ASCII)*/
        {0x30, 0x49, 0x49, 0x4A, 0x3C}, /*"9", 57(ASCII)*/
        {0x00, 0x00, 0x11, 0x00, 0x00}, /*":", 58(ASCII)*/
        {0x00, 0x01, 0x12, 0x00, 0x00}, /*";", 59(ASCII)*/
        {0x00, 0x08, 0x14, 0x22, 0x41}, /*"<", 60(ASCII)*/
        {0x14, 0x14, 0x14, 0x14, 0x14}, /*"=", 61(ASCII)*/
        {0x41, 0x22, 0x14, 0x08, 0x00}, /*">", 62(ASCII)*/
        {0x20, 0x40, 0x45, 0x48, 0x30}, /*"?", 63(ASCII)*/
        {0x3E, 0x41, 0x4C, 0x52, 0x3E}, /*"@", 64(ASCII)*/
        {0x1F, 0x24, 0x44, 0x24, 0x1F}, /*"A", 65(ASCII)*/
        {0x41, 0x7F, 0x49, 0x49, 0x36}, /*"B", 66(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x22}, /*"C", 67(ASCII)*/
        {0x41, 0x7F, 0x41, 0x41, 0x3E}, /*"D", 68(ASCII)*/
        {0x7F, 0x49, 0x49, 0x49, 0x41}, /*"E", 69(ASCII)*/
        {0x7F, 0x48, 0x48, 0x48, 0x40}, /*"F", 70(ASCII)*/
        {0x3E, 0x41, 0x49, 0x49, 0x2E}, /*"G", 71(ASCII)*/
        {0x7F, 0x08, 0x08, 0x08, 0x7F}, /*"H", 72(ASCII)*/
        {0x00, 0x41, 0x7F, 0x41, 0x00}, /*"I", 73(ASCII)*/
        {0x02, 0x01, 0x41, 0x7F, 0x40}, /*"J", 74(ASCII)*/
        {0x7F, 0x08, 0x14, 0x22, 0x41}, /*"K", 75(ASCII)*/
        {0x7F, 0x01, 0x01, 0x01, 0x01}, /*"L", 76(ASCII)*/
        {0x7F, 0x20, 0x18, 0x20, 0x7F}, /*"M", 77(ASCII)*/
        {0x7F, 0x10, 0x08, 0x04, 0x7F}, /*"N", 78(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, /*"O", 79(ASCII)*/
        {0x7F, 0x48, 0x48, 0x48, 0x30}, /*"P", 80(ASCII)*/
        {0x3E, 0x41, 0x45, 0x42, 0x3D}, /*"Q", 81(ASCII)*/
        {0x7F, 0x48, 0x4C, 0x4A, 0x31}, /*"R", 82(ASCII)*/
        {0x32, 0x49, 0x49, 0x49, 0x26}, /*"S", 83(ASCII)*/
        {0x40, 0x40, 0x7F, 0x40, 0x40}, /*"T", 84(ASCII)*/
        {0x7E, 0x01, 0x01, 0x01, 0x7E}, /*"U", 85(ASCII)*/
        {0x78, 0x06, 0x01, 0x06, 0x78}, /*"V", 86(ASCII)*/
        {0x7F, 0x02, 0x0C, 0x02, 0x7F}, /*"W", 87(ASCII)*/
        {0x63, 0x14, 0x08, 0x14, 0x63}, /*"X", 88(ASCII)*/
        {0x70, 0x08, 0x07, 0x08, 0x70}, /*"Y", 89(ASCII)*/
        {0x43, 0x45, 0x49, 0x51, 0x61}, /*"Z", 90(ASCII)*/
        {0x00, 0x7F, 0x41, 0x41, 0x00}, /*"[", 91(ASCII)*/
        {0x20, 0x10, 0x08, 0x04, 0x02}, /*"\", 92(ASCII)*/
        {0x00, 0x41, 0x41, 0x7F, 0x00}, /*"]", 93(ASCII)*/
        {0x00, 0x20, 0x40, 0x20, 0x00}, /*"^", 94(ASCII)*/
        {0x01, 0x01, 0x01, 0x01, 0x01}, /*"_", 95(ASCII)*/
        {0x00, 0x00, 0x40, 0x20, 0x00}, /*"`", 96(ASCII)*/
        {0x02, 0x15, 0x15, 0x15, 0x0F}, /*"a", 97(ASCII)*/
        {0x7F, 0x11, 0x11, 0x11, 0x0E}, /*"b", 98(ASCII)*/
        {0x0E, 0x11, 0x11, 0x11, 0x11}, /*"c", 99(ASCII)*/
        {0x0E, 0x11, 0x11, 0x11, 0x7F}, /*"d", 100(ASCII)*/
        {0x0E, 0x15, 0x15, 0x15, 0x0D}, /*"e", 101(ASCII)*/
        {0x10, 0x10, 0x3F, 0x50, 0x50}, /*"f", 102(ASCII)*/
        {0x19, 0x25, 0x25, 0x1E, 0x20}, /*"g", 103(ASCII)*/
        {0x7F, 0x08, 0x10, 0x10, 0x0F}, /*"h", 104(ASCII)*/
        {0x00, 0x11, 0x5F, 0x01, 0x00}, /*"i", 105(ASCII)*/
        {0x02, 0x01, 0x11, 0x5E, 0x00}, /*"j", 106(ASCII)*/
        {0x00, 0x7F, 0x04, 0x0A, 0x11}, /*"k", 107(ASCII)*/
        {0x00, 0x41, 0x7F, 0x01, 0x00}, /*"l", 108(ASCII)*/
        {0x1F, 0x10, 0x0F, 0x10, 0x0F}, /*"m", 109(ASCII)*/
        {0x1F, 0x08, 0x10, 0x10, 0x0F}, /*"n", 110(ASCII)*/
        {0x0E, 0x11, 0x11, 0x11, 0x0E}, /*"o", 111(ASCII)*/
        {0x1F, 0x12, 0x12, 0x12, 0x0C}, /*"p", 112(ASCII)*/
        {0x0C, 0x12, 0x12, 0x12, 0x1F}, /*"q", 113(ASCII)*/
        {0x00, 0x1F, 0x08, 0x10, 0x10}, /*"r", 114(ASCII)*/
        {0x09, 0x15, 0x15, 0x15, 0x12}, /*"s", 115(ASCII)*/
        {0x00, 0x10, 0x7E, 0x11, 0x11}, /*"t", 116(ASCII)*/
        {0x1E, 0x01, 0x01, 0x02, 0x1F}, /*"u", 117(ASCII)*/
        {0x18, 0x06, 0x01, 0x06, 0x18}, /*"v", 118(ASCII)*/
        {0x1F, 0x02, 0x0C, 0x02, 0x1F}, /*"w", 119(ASCII)*/
        {0x11, 0x0A, 0x04, 0x0A, 0x11}, /*"x", 120(ASCII)*/
        {0x18, 0x05, 0x05, 0x05, 0x1E}, /*"y", 121(ASCII)*/
        {0x11, 0x13, 0x15, 0x19, 0x11}, /*"z", 122(ASCII)*/
        {0x00, 0x08, 0x36, 0x41, 0x00}, /*"{", 123(ASCII)*/
        {0x00, 0x00, 0x7F, 0x00, 0x00}, /*"|", 124(ASCII)*/
        {0x00, 0x41, 0x36, 0x08, 0x00}, /*"}", 125(ASCII)*/
        {0x04, 0x08, 0x0C, 0x04, 0x08}, /*"~", 126(ASCII)*/
        {0x7F, 0x7F, 0x7F, 0x7F, 0x7F}, /*"删除符(Del)", 127(ASCII)*/
    };

public:
    BOE_48_1504FN(gpio_num_t din, gpio_num_t clk, gpio_num_t cs, spi_host_device_t spi_num);
    BOE_48_1504FN(spi_device_handle_t spi_device);
    void noti_show(const char *str, int timeout = 8000);
    void content_show(int start, const char *buf, int size, bool forceupdate = false, NumAni ani = LEFT2RT);

private:
    int roll_timeout_ = 2000;
    bool cgramBusy[3] = {0};
    ContentData currentContentData[DISPLAY_SIZE] = {0};
    ContentData tempContentData[DISPLAY_SIZE] = {0};
    CircularBuffer *cb = new CircularBuffer();
    int64_t content_inhibit_time = 0;

protected:
    void charhelper(int index, char ch);                     // write to dcram
    void charhelper(int index, int ramindex, uint8_t *code); // write to cgram, then index from the dcram
    const uint8_t *find_content_hex_code(char ch);
    void display_buffer();
    void scroll_buffer();
    int get_cgram();
    void free_cgram(int index);
    void contentanimate();
    void noti_show(int start, const char *buf, int size, bool forceupdate = false, NumAni ani = LEFT2RT, int timeout = 2000);
};

#endif // _BOE_48_1504FN_H_
