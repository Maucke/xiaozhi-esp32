/*
 * Author: 施华锋
 * Date: 2025-01-16
 * Description: This header file defines the HUV_13SS16T class for communicating with the HUV_13SS16T device via SPI.
 */

#ifndef _HUV_13SS16T_H_
#define _HUV_13SS16T_H_

#include <driver/spi_master.h>
#include <driver/gpio.h>
#include <esp_log.h>

#define USE_MUTI_FONTS false
// uint8_t reverseBits0To6(uint8_t byte)
// {
//     uint8_t bit7 = byte & 0x80;
//     uint8_t lower6Bits = byte & 0x7F;
//     uint8_t reversedLower6Bits = 0;
//     for (int i = 0; i < 7; i++)
//     {
//         reversedLower6Bits |= ((lower6Bits >> i) & 1) << (6 - i);
//     }
//
//     return bit7 | reversedLower6Bits;
// }

// int main()
// {
//     for (int i = 0; i < CHAR_SIZE; i++)
//     {
//         printf("{");
//         printf("0x%02X", reverseBits0To6(hex_codes_style2[i][0]));
//         for (int j = 1; j < 5; j++)
//             printf(", 0x%02X", reverseBits0To6(hex_codes_style2[i][j]));
//         printf("}, ");
//         printf("/*\"%c\", %d(ASCII)*/\r\n", (char)(i + ' '), (i + ' '));
//     }
//     return 0;
// }
/**
 * @class HUV_13SS16T
 * @brief A class for interacting with the HUV_13SS16T device using SPI communication.
 *
 * This class provides methods to initialize the HUV_13SS16T device, write data to it, and refresh its display.
 */
class HUV_13SS16T
{
public:
#define PIXEL_COUNT (8)
#define MAX_X 10
#define MAX_Y 9
#define CHAR_SIZE (95 + 1)
    //  Hexadecimal code corresponding to each character
    //  !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz
    const uint8_t hex_codes_style1[CHAR_SIZE][5] = {
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*" ", 32(ASCII)*/
        {0x00, 0x00, 0x4F, 0x00, 0x00}, /*"!", 33(ASCII)*/
        {0x00, 0x03, 0x00, 0x03, 0x00}, /*""", 34(ASCII)*/
        {0x22, 0x7F, 0x22, 0x7F, 0x22}, /*"#", 35(ASCII)*/
        {0x24, 0x2A, 0x7F, 0x2A, 0x12}, /*"$", 36(ASCII)*/
        {0x23, 0x13, 0x08, 0x64, 0x62}, /*"%", 37(ASCII)*/
        {0x36, 0x49, 0x56, 0x20, 0x58}, /*"&", 38(ASCII)*/
        {0x00, 0x02, 0x01, 0x00, 0x00}, /*"'", 39(ASCII)*/
        {0x00, 0x1C, 0x22, 0x41, 0x00}, /*"(", 40(ASCII)*/
        {0x00, 0x41, 0x22, 0x1C, 0x00}, /*")", 41(ASCII)*/
        {0x14, 0x08, 0x3E, 0x08, 0x14}, /*"*", 42(ASCII)*/
        {0x08, 0x08, 0x3E, 0x08, 0x08}, /*"+", 43(ASCII)*/
        {0x00, 0x40, 0x20, 0x00, 0x00}, /*",", 44(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"-", 45(ASCII)*/
        {0x00, 0x40, 0x00, 0x00, 0x00}, /*".", 46(ASCII)*/
        {0x20, 0x10, 0x08, 0x04, 0x02}, /*"/", 47(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, /*"0", 48(ASCII)*/
        {0x00, 0x02, 0x02, 0x7F, 0x00}, /*"1", 49(ASCII)*/
        {0x62, 0x51, 0x49, 0x49, 0x46}, /*"2", 50(ASCII)*/
        {0x22, 0x41, 0x49, 0x49, 0x36}, /*"3", 51(ASCII)*/
        {0x18, 0x14, 0x12, 0x7F, 0x10}, /*"4", 52(ASCII)*/
        {0x27, 0x45, 0x45, 0x45, 0x39}, /*"5", 53(ASCII)*/
        {0x3C, 0x4A, 0x49, 0x49, 0x30}, /*"6", 54(ASCII)*/
        {0x01, 0x01, 0x71, 0x0D, 0x03}, /*"7", 55(ASCII)*/
        {0x36, 0x49, 0x49, 0x49, 0x36}, /*"8", 56(ASCII)*/
        {0x06, 0x49, 0x49, 0x29, 0x1E}, /*"9", 57(ASCII)*/
        {0x00, 0x00, 0x44, 0x00, 0x00}, /*":", 58(ASCII)*/
        {0x00, 0x40, 0x24, 0x00, 0x00}, /*";", 59(ASCII)*/
        {0x00, 0x08, 0x14, 0x22, 0x41}, /*"<", 60(ASCII)*/
        {0x14, 0x14, 0x14, 0x14, 0x14}, /*"=", 61(ASCII)*/
        {0x41, 0x22, 0x14, 0x08, 0x00}, /*">", 62(ASCII)*/
        {0x02, 0x01, 0x51, 0x09, 0x06}, /*"?", 63(ASCII)*/
        {0x3E, 0x41, 0x19, 0x25, 0x3E}, /*"@", 64(ASCII)*/
        {0x7C, 0x12, 0x11, 0x12, 0x7C}, /*"A", 65(ASCII)*/
        {0x41, 0x7F, 0x49, 0x49, 0x36}, /*"B", 66(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x22}, /*"C", 67(ASCII)*/
        {0x41, 0x7F, 0x41, 0x41, 0x3E}, /*"D", 68(ASCII)*/
        {0x7F, 0x49, 0x49, 0x49, 0x41}, /*"E", 69(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x01}, /*"F", 70(ASCII)*/
        {0x3E, 0x41, 0x49, 0x49, 0x3A}, /*"G", 71(ASCII)*/
        {0x7F, 0x08, 0x08, 0x08, 0x7F}, /*"H", 72(ASCII)*/
        {0x00, 0x41, 0x7F, 0x41, 0x00}, /*"I", 73(ASCII)*/
        {0x20, 0x40, 0x41, 0x7F, 0x01}, /*"J", 74(ASCII)*/
        {0x7F, 0x08, 0x14, 0x22, 0x41}, /*"K", 75(ASCII)*/
        {0x7F, 0x40, 0x40, 0x40, 0x40}, /*"L", 76(ASCII)*/
        {0x7F, 0x02, 0x0C, 0x02, 0x7F}, /*"M", 77(ASCII)*/
        {0x7F, 0x04, 0x08, 0x10, 0x7F}, /*"N", 78(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, /*"O", 79(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x06}, /*"P", 80(ASCII)*/
        {0x3E, 0x41, 0x51, 0x21, 0x5E}, /*"Q", 81(ASCII)*/
        {0x7F, 0x09, 0x19, 0x29, 0x46}, /*"R", 82(ASCII)*/
        {0x26, 0x49, 0x49, 0x49, 0x32}, /*"S", 83(ASCII)*/
        {0x01, 0x01, 0x7F, 0x01, 0x01}, /*"T", 84(ASCII)*/
        {0x3F, 0x40, 0x40, 0x40, 0x3F}, /*"U", 85(ASCII)*/
        {0x0F, 0x30, 0x40, 0x30, 0x0F}, /*"V", 86(ASCII)*/
        {0x7F, 0x20, 0x18, 0x20, 0x7F}, /*"W", 87(ASCII)*/
        {0x63, 0x14, 0x08, 0x14, 0x63}, /*"X", 88(ASCII)*/
        {0x07, 0x08, 0x70, 0x08, 0x07}, /*"Y", 89(ASCII)*/
        {0x61, 0x51, 0x49, 0x45, 0x43}, /*"Z", 90(ASCII)*/
        {0x00, 0x7F, 0x41, 0x41, 0x00}, /*"[", 91(ASCII)*/
        {0x02, 0x04, 0x08, 0x10, 0x20}, /*"\", 92(ASCII)*/
        {0x00, 0x41, 0x41, 0x7F, 0x00}, /*"]", 93(ASCII)*/
        {0x00, 0x02, 0x01, 0x02, 0x00}, /*"^", 94(ASCII)*/
        {0x40, 0x40, 0x40, 0x40, 0x40}, /*"_", 95(ASCII)*/
        {0x00, 0x00, 0x01, 0x02, 0x00}, /*"`", 96(ASCII)*/
        {0x20, 0x54, 0x54, 0x54, 0x78}, /*"a", 97(ASCII)*/
        {0x7F, 0x44, 0x44, 0x44, 0x38}, /*"b", 98(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x44}, /*"c", 99(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x7F}, /*"d", 100(ASCII)*/
        {0x38, 0x54, 0x54, 0x54, 0x58}, /*"e", 101(ASCII)*/
        {0x04, 0x04, 0x7E, 0x05, 0x05}, /*"f", 102(ASCII)*/
        {0x4C, 0x52, 0x52, 0x3C, 0x02}, /*"g", 103(ASCII)*/
        {0x7F, 0x08, 0x04, 0x04, 0x78}, /*"h", 104(ASCII)*/
        {0x00, 0x44, 0x7D, 0x40, 0x00}, /*"i", 105(ASCII)*/
        {0x20, 0x40, 0x44, 0x3D, 0x00}, /*"j", 106(ASCII)*/
        {0x00, 0x7F, 0x10, 0x28, 0x44}, /*"k", 107(ASCII)*/
        {0x00, 0x41, 0x7F, 0x40, 0x00}, /*"l", 108(ASCII)*/
        {0x7C, 0x04, 0x78, 0x04, 0x78}, /*"m", 109(ASCII)*/
        {0x7C, 0x08, 0x04, 0x04, 0x78}, /*"n", 110(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x38}, /*"o", 111(ASCII)*/
        {0x7C, 0x24, 0x24, 0x24, 0x18}, /*"p", 112(ASCII)*/
        {0x18, 0x24, 0x24, 0x24, 0x7C}, /*"q", 113(ASCII)*/
        {0x00, 0x7C, 0x08, 0x04, 0x04}, /*"r", 114(ASCII)*/
        {0x48, 0x54, 0x54, 0x54, 0x24}, /*"s", 115(ASCII)*/
        {0x00, 0x04, 0x3F, 0x44, 0x44}, /*"t", 116(ASCII)*/
        {0x3C, 0x40, 0x40, 0x20, 0x7C}, /*"u", 117(ASCII)*/
        {0x0C, 0x30, 0x40, 0x30, 0x0C}, /*"v", 118(ASCII)*/
        {0x7C, 0x20, 0x18, 0x20, 0x7C}, /*"w", 119(ASCII)*/
        {0x44, 0x28, 0x10, 0x28, 0x44}, /*"x", 120(ASCII)*/
        {0x0C, 0x50, 0x50, 0x50, 0x3C}, /*"y", 121(ASCII)*/
        {0x44, 0x64, 0x54, 0x4C, 0x44}, /*"z", 122(ASCII)*/
        {0x00, 0x08, 0x36, 0x41, 0x00}, /*"{", 123(ASCII)*/
        {0x00, 0x00, 0x7F, 0x00, 0x00}, /*"|", 124(ASCII)*/
        {0x00, 0x41, 0x36, 0x08, 0x00}, /*"}", 125(ASCII)*/
        {0x10, 0x08, 0x18, 0x10, 0x08}, /*"~", 126(ASCII)*/
        {0x7F, 0x7F, 0x7F, 0x7F, 0x7F}, /*"", 127(ASCII)*/
    };
#if USE_MUTI_FONTS
    const uint8_t hex_codes_style2[CHAR_SIZE][5] = {
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*" ", 32(ASCII)*/
        {0x00, 0x00, 0x4F, 0x00, 0x00}, /*"!", 33(ASCII)*/
        {0x00, 0x03, 0x00, 0x03, 0x00}, /*""", 34(ASCII)*/
        {0x22, 0x7F, 0x22, 0x7F, 0x22}, /*"#", 35(ASCII)*/
        {0x24, 0x2A, 0x7F, 0x2A, 0x12}, /*"$", 36(ASCII)*/
        {0x23, 0x13, 0x08, 0x64, 0x62}, /*"%", 37(ASCII)*/
        {0x36, 0x49, 0x56, 0x20, 0x58}, /*"&", 38(ASCII)*/
        {0x00, 0x02, 0x01, 0x00, 0x00}, /*"'", 39(ASCII)*/
        {0x00, 0x1C, 0x22, 0x41, 0x00}, /*"(", 40(ASCII)*/
        {0x00, 0x41, 0x22, 0x1C, 0x00}, /*")", 41(ASCII)*/
        {0x14, 0x08, 0x3E, 0x08, 0x14}, /*"*", 42(ASCII)*/
        {0x08, 0x08, 0x3E, 0x08, 0x08}, /*"+", 43(ASCII)*/
        {0x00, 0x40, 0x20, 0x00, 0x00}, /*",", 44(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"-", 45(ASCII)*/
        {0x00, 0x40, 0x00, 0x00, 0x00}, /*".", 46(ASCII)*/
        {0x20, 0x10, 0x08, 0x04, 0x02}, /*"/", 47(ASCII)*/
        {0x3E, 0x51, 0x49, 0x45, 0x3E}, /*"0", 48(ASCII)*/
        {0x00, 0x42, 0x7F, 0x40, 0x00}, /*"1", 49(ASCII)*/
        {0x42, 0x61, 0x51, 0x49, 0x46}, /*"2", 50(ASCII)*/
        {0x21, 0x41, 0x45, 0x4B, 0x31}, /*"3", 51(ASCII)*/
        {0x18, 0x14, 0x12, 0x7F, 0x10}, /*"4", 52(ASCII)*/
        {0x27, 0x45, 0x45, 0x45, 0x39}, /*"5", 53(ASCII)*/
        {0x3C, 0x4A, 0x49, 0x49, 0x30}, /*"6", 54(ASCII)*/
        {0x01, 0x71, 0x09, 0x05, 0x03}, /*"7", 55(ASCII)*/
        {0x36, 0x49, 0x49, 0x49, 0x36}, /*"8", 56(ASCII)*/
        {0x06, 0x49, 0x49, 0x29, 0x1E}, /*"9", 57(ASCII)*/
        {0x00, 0x00, 0x24, 0x00, 0x00}, /*":", 58(ASCII)*/
        {0x00, 0x00, 0x44, 0x00, 0x00}, /*";", 59(ASCII)*/
        {0x08, 0x14, 0x22, 0x22, 0x41}, /*"<", 60(ASCII)*/
        {0x14, 0x14, 0x14, 0x14, 0x14}, /*"=", 61(ASCII)*/
        {0x41, 0x22, 0x22, 0x14, 0x08}, /*">", 62(ASCII)*/
        {0x07, 0x01, 0x51, 0x09, 0x07}, /*"?", 63(ASCII)*/
        {0x3E, 0x5D, 0x63, 0x5F, 0x61}, /*"@", 64(ASCII)*/
        {0x7C, 0x12, 0x11, 0x12, 0x7C}, /*"A", 65(ASCII)*/
        {0x41, 0x7F, 0x49, 0x49, 0x36}, /*"B", 66(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x22}, /*"C", 67(ASCII)*/
        {0x41, 0x7F, 0x41, 0x41, 0x3E}, /*"D", 68(ASCII)*/
        {0x7F, 0x49, 0x49, 0x49, 0x41}, /*"E", 69(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x01}, /*"F", 70(ASCII)*/
        {0x3E, 0x41, 0x49, 0x49, 0x3A}, /*"G", 71(ASCII)*/
        {0x7F, 0x08, 0x08, 0x08, 0x7F}, /*"H", 72(ASCII)*/
        {0x00, 0x41, 0x7F, 0x41, 0x00}, /*"I", 73(ASCII)*/
        {0x20, 0x40, 0x41, 0x7F, 0x01}, /*"J", 74(ASCII)*/
        {0x7F, 0x08, 0x14, 0x22, 0x41}, /*"K", 75(ASCII)*/
        {0x7F, 0x40, 0x40, 0x40, 0x40}, /*"L", 76(ASCII)*/
        {0x7F, 0x02, 0x0C, 0x02, 0x7F}, /*"M", 77(ASCII)*/
        {0x7F, 0x04, 0x08, 0x10, 0x7F}, /*"N", 78(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, /*"O", 79(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x06}, /*"P", 80(ASCII)*/
        {0x3E, 0x41, 0x51, 0x21, 0x5E}, /*"Q", 81(ASCII)*/
        {0x7F, 0x09, 0x19, 0x29, 0x46}, /*"R", 82(ASCII)*/
        {0x26, 0x49, 0x49, 0x49, 0x32}, /*"S", 83(ASCII)*/
        {0x01, 0x01, 0x7F, 0x01, 0x01}, /*"T", 84(ASCII)*/
        {0x3F, 0x40, 0x40, 0x40, 0x3F}, /*"U", 85(ASCII)*/
        {0x0F, 0x30, 0x40, 0x30, 0x0F}, /*"V", 86(ASCII)*/
        {0x7F, 0x20, 0x18, 0x20, 0x7F}, /*"W", 87(ASCII)*/
        {0x63, 0x14, 0x08, 0x14, 0x63}, /*"X", 88(ASCII)*/
        {0x07, 0x08, 0x70, 0x08, 0x07}, /*"Y", 89(ASCII)*/
        {0x61, 0x51, 0x49, 0x45, 0x43}, /*"Z", 90(ASCII)*/
        {0x00, 0x00, 0x7F, 0x00, 0x00}, /*"[", 91(ASCII)*/
        {0x01, 0x06, 0x08, 0x30, 0x40}, /*"\", 92(ASCII)*/
        {0x00, 0x00, 0x7F, 0x00, 0x00}, /*"]", 93(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"^", 94(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"_", 95(ASCII)*/
        {0x00, 0x01, 0x00, 0x00, 0x00}, /*"`", 96(ASCII)*/
        {0x20, 0x54, 0x54, 0x54, 0x78}, /*"a", 97(ASCII)*/
        {0x7F, 0x44, 0x44, 0x44, 0x38}, /*"b", 98(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x44}, /*"c", 99(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x7F}, /*"d", 100(ASCII)*/
        {0x38, 0x54, 0x54, 0x54, 0x58}, /*"e", 101(ASCII)*/
        {0x04, 0x04, 0x7E, 0x05, 0x05}, /*"f", 102(ASCII)*/
        {0x4C, 0x52, 0x52, 0x3C, 0x02}, /*"g", 103(ASCII)*/
        {0x7F, 0x08, 0x04, 0x04, 0x78}, /*"h", 104(ASCII)*/
        {0x00, 0x44, 0x7D, 0x40, 0x00}, /*"i", 105(ASCII)*/
        {0x20, 0x40, 0x44, 0x3D, 0x00}, /*"j", 106(ASCII)*/
        {0x00, 0x7F, 0x10, 0x28, 0x44}, /*"k", 107(ASCII)*/
        {0x00, 0x41, 0x7F, 0x40, 0x00}, /*"l", 108(ASCII)*/
        {0x7C, 0x04, 0x78, 0x04, 0x78}, /*"m", 109(ASCII)*/
        {0x7C, 0x08, 0x04, 0x04, 0x78}, /*"n", 110(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x38}, /*"o", 111(ASCII)*/
        {0x7C, 0x24, 0x24, 0x24, 0x18}, /*"p", 112(ASCII)*/
        {0x18, 0x24, 0x24, 0x24, 0x7C}, /*"q", 113(ASCII)*/
        {0x00, 0x7C, 0x08, 0x04, 0x04}, /*"r", 114(ASCII)*/
        {0x48, 0x54, 0x54, 0x54, 0x24}, /*"s", 115(ASCII)*/
        {0x00, 0x04, 0x3F, 0x44, 0x44}, /*"t", 116(ASCII)*/
        {0x3C, 0x40, 0x40, 0x20, 0x7C}, /*"u", 117(ASCII)*/
        {0x0C, 0x30, 0x40, 0x30, 0x0C}, /*"v", 118(ASCII)*/
        {0x7C, 0x20, 0x18, 0x20, 0x7C}, /*"w", 119(ASCII)*/
        {0x44, 0x28, 0x10, 0x28, 0x44}, /*"x", 120(ASCII)*/
        {0x0C, 0x50, 0x50, 0x50, 0x3C}, /*"y", 121(ASCII)*/
        {0x44, 0x64, 0x54, 0x4C, 0x44}, /*"z", 122(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"{", 123(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"|", 124(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"}", 125(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"~", 126(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"", 127(ASCII)*/

    };
    const uint8_t hex_codes_style3[CHAR_SIZE][5] = {
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*" ", 32(ASCII)*/
        {0x00, 0x00, 0x4F, 0x00, 0x00}, /*"!", 33(ASCII)*/
        {0x00, 0x03, 0x00, 0x03, 0x00}, /*""", 34(ASCII)*/
        {0x22, 0x7F, 0x22, 0x7F, 0x22}, /*"#", 35(ASCII)*/
        {0x24, 0x2A, 0x7F, 0x2A, 0x12}, /*"$", 36(ASCII)*/
        {0x23, 0x13, 0x08, 0x64, 0x62}, /*"%", 37(ASCII)*/
        {0x36, 0x49, 0x56, 0x20, 0x58}, /*"&", 38(ASCII)*/
        {0x00, 0x02, 0x01, 0x00, 0x00}, /*"'", 39(ASCII)*/
        {0x00, 0x1C, 0x22, 0x41, 0x00}, /*"(", 40(ASCII)*/
        {0x00, 0x41, 0x22, 0x1C, 0x00}, /*")", 41(ASCII)*/
        {0x14, 0x08, 0x3E, 0x08, 0x14}, /*"*", 42(ASCII)*/
        {0x08, 0x08, 0x3E, 0x08, 0x08}, /*"+", 43(ASCII)*/
        {0x00, 0x40, 0x20, 0x00, 0x00}, /*",", 44(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"-", 45(ASCII)*/
        {0x00, 0x40, 0x00, 0x00, 0x00}, /*".", 46(ASCII)*/
        {0x20, 0x10, 0x08, 0x04, 0x02}, /*"/", 47(ASCII)*/
        {0x3E, 0x7F, 0x41, 0x41, 0x3E}, /*"0", 48(ASCII)*/
        {0x00, 0x06, 0x7F, 0x7F, 0x00}, /*"1", 49(ASCII)*/
        {0x62, 0x73, 0x79, 0x6F, 0x66}, /*"2", 50(ASCII)*/
        {0x21, 0x61, 0x4D, 0x7F, 0x33}, /*"3", 51(ASCII)*/
        {0x1C, 0x12, 0x7F, 0x7F, 0x10}, /*"4", 52(ASCII)*/
        {0x26, 0x67, 0x45, 0x7D, 0x38}, /*"5", 53(ASCII)*/
        {0x3E, 0x7F, 0x4D, 0x7D, 0x38}, /*"6", 54(ASCII)*/
        {0x01, 0x71, 0x7F, 0x0F, 0x03}, /*"7", 55(ASCII)*/
        {0x36, 0x7F, 0xC9, 0x49, 0x36}, /*"8", 56(ASCII)*/
        {0x0E, 0x5B, 0x79, 0x7F, 0x1E}, /*"9", 57(ASCII)*/
        {0x00, 0x36, 0x36, 0x00, 0x00}, /*":", 58(ASCII)*/
        {0x00, 0x00, 0x44, 0x44, 0x00}, /*";", 59(ASCII)*/
        {0x08, 0x1C, 0x36, 0x22, 0x00}, /*"<", 60(ASCII)*/
        {0x14, 0x14, 0x14, 0x14, 0x14}, /*"=", 61(ASCII)*/
        {0x00, 0x22, 0x36, 0x1C, 0x08}, /*">", 62(ASCII)*/
        {0x02, 0x03, 0x09, 0x0F, 0x06}, /*"?", 63(ASCII)*/
        {0x3E, 0x7F, 0x5F, 0x7F, 0x3E}, /*"@", 64(ASCII)*/
        {0x7C, 0x12, 0x11, 0x12, 0x7C}, /*"A", 65(ASCII)*/
        {0x41, 0x7F, 0x49, 0x49, 0x36}, /*"B", 66(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x22}, /*"C", 67(ASCII)*/
        {0x41, 0x7F, 0x41, 0x41, 0x3E}, /*"D", 68(ASCII)*/
        {0x7F, 0x49, 0x49, 0x49, 0x41}, /*"E", 69(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x01}, /*"F", 70(ASCII)*/
        {0x3E, 0x41, 0x49, 0x49, 0x3A}, /*"G", 71(ASCII)*/
        {0x7F, 0x08, 0x08, 0x08, 0x7F}, /*"H", 72(ASCII)*/
        {0x00, 0x41, 0x7F, 0x41, 0x00}, /*"I", 73(ASCII)*/
        {0x20, 0x40, 0x41, 0x7F, 0x01}, /*"J", 74(ASCII)*/
        {0x7F, 0x08, 0x14, 0x22, 0x41}, /*"K", 75(ASCII)*/
        {0x7F, 0x40, 0x40, 0x40, 0x40}, /*"L", 76(ASCII)*/
        {0x7F, 0x02, 0x0C, 0x02, 0x7F}, /*"M", 77(ASCII)*/
        {0x7F, 0x04, 0x08, 0x10, 0x7F}, /*"N", 78(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, /*"O", 79(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x06}, /*"P", 80(ASCII)*/
        {0x3E, 0x41, 0x51, 0x21, 0x5E}, /*"Q", 81(ASCII)*/
        {0x7F, 0x09, 0x19, 0x29, 0x46}, /*"R", 82(ASCII)*/
        {0x26, 0x49, 0x49, 0x49, 0x32}, /*"S", 83(ASCII)*/
        {0x01, 0x01, 0x7F, 0x01, 0x01}, /*"T", 84(ASCII)*/
        {0x3F, 0x40, 0x40, 0x40, 0x3F}, /*"U", 85(ASCII)*/
        {0x0F, 0x30, 0x40, 0x30, 0x0F}, /*"V", 86(ASCII)*/
        {0x7F, 0x20, 0x18, 0x20, 0x7F}, /*"W", 87(ASCII)*/
        {0x63, 0x14, 0x08, 0x14, 0x63}, /*"X", 88(ASCII)*/
        {0x07, 0x08, 0x70, 0x08, 0x07}, /*"Y", 89(ASCII)*/
        {0x61, 0x51, 0x49, 0x45, 0x43}, /*"Z", 90(ASCII)*/
        {0x00, 0x00, 0x7F, 0x7F, 0x00}, /*"[", 91(ASCII)*/
        {0x00, 0x0E, 0x7E, 0x70, 0x00}, /*"\", 92(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"]", 93(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"^", 94(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"_", 95(ASCII)*/
        {0x00, 0x01, 0x01, 0x00, 0x00}, /*"`", 96(ASCII)*/
        {0x20, 0x54, 0x54, 0x54, 0x78}, /*"a", 97(ASCII)*/
        {0x7F, 0x44, 0x44, 0x44, 0x38}, /*"b", 98(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x44}, /*"c", 99(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x7F}, /*"d", 100(ASCII)*/
        {0x38, 0x54, 0x54, 0x54, 0x58}, /*"e", 101(ASCII)*/
        {0x04, 0x04, 0x7E, 0x05, 0x05}, /*"f", 102(ASCII)*/
        {0x4C, 0x52, 0x52, 0x3C, 0x02}, /*"g", 103(ASCII)*/
        {0x7F, 0x08, 0x04, 0x04, 0x78}, /*"h", 104(ASCII)*/
        {0x00, 0x44, 0x7D, 0x40, 0x00}, /*"i", 105(ASCII)*/
        {0x20, 0x40, 0x44, 0x3D, 0x00}, /*"j", 106(ASCII)*/
        {0x00, 0x7F, 0x10, 0x28, 0x44}, /*"k", 107(ASCII)*/
        {0x00, 0x41, 0x7F, 0x40, 0x00}, /*"l", 108(ASCII)*/
        {0x7C, 0x04, 0x78, 0x04, 0x78}, /*"m", 109(ASCII)*/
        {0x7C, 0x08, 0x04, 0x04, 0x78}, /*"n", 110(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x38}, /*"o", 111(ASCII)*/
        {0x7C, 0x24, 0x24, 0x24, 0x18}, /*"p", 112(ASCII)*/
        {0x18, 0x24, 0x24, 0x24, 0x7C}, /*"q", 113(ASCII)*/
        {0x00, 0x7C, 0x08, 0x04, 0x04}, /*"r", 114(ASCII)*/
        {0x48, 0x54, 0x54, 0x54, 0x24}, /*"s", 115(ASCII)*/
        {0x00, 0x04, 0x3F, 0x44, 0x44}, /*"t", 116(ASCII)*/
        {0x3C, 0x40, 0x40, 0x20, 0x7C}, /*"u", 117(ASCII)*/
        {0x0C, 0x30, 0x40, 0x30, 0x0C}, /*"v", 118(ASCII)*/
        {0x7C, 0x20, 0x18, 0x20, 0x7C}, /*"w", 119(ASCII)*/
        {0x44, 0x28, 0x10, 0x28, 0x44}, /*"x", 120(ASCII)*/
        {0x0C, 0x50, 0x50, 0x50, 0x3C}, /*"y", 121(ASCII)*/
        {0x44, 0x64, 0x54, 0x4C, 0x44}, /*"z", 122(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"{", 123(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"|", 124(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"}", 125(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"~", 126(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"", 127(ASCII)*/

    };
    const uint8_t hex_codes_style4[CHAR_SIZE][5] = {
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*" ", 32(ASCII)*/
        {0x00, 0x00, 0x4F, 0x00, 0x00}, /*"!", 33(ASCII)*/
        {0x00, 0x03, 0x00, 0x03, 0x00}, /*""", 34(ASCII)*/
        {0x22, 0x7F, 0x22, 0x7F, 0x22}, /*"#", 35(ASCII)*/
        {0x24, 0x2A, 0x7F, 0x2A, 0x12}, /*"$", 36(ASCII)*/
        {0x23, 0x13, 0x08, 0x64, 0x62}, /*"%", 37(ASCII)*/
        {0x36, 0x49, 0x56, 0x20, 0x58}, /*"&", 38(ASCII)*/
        {0x00, 0x02, 0x01, 0x00, 0x00}, /*"'", 39(ASCII)*/
        {0x00, 0x1C, 0x22, 0x41, 0x00}, /*"(", 40(ASCII)*/
        {0x00, 0x41, 0x22, 0x1C, 0x00}, /*")", 41(ASCII)*/
        {0x14, 0x08, 0x3E, 0x08, 0x14}, /*"*", 42(ASCII)*/
        {0x08, 0x08, 0x3E, 0x08, 0x08}, /*"+", 43(ASCII)*/
        {0x00, 0x40, 0x20, 0x00, 0x00}, /*",", 44(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"-", 45(ASCII)*/
        {0x00, 0x40, 0x00, 0x00, 0x00}, /*".", 46(ASCII)*/
        {0x20, 0x10, 0x08, 0x04, 0x02}, /*"/", 47(ASCII)*/
        {0x7F, 0x41, 0x41, 0x7F, 0x7F}, /*"0", 48(ASCII)*/
        {0x00, 0x00, 0x7F, 0x7F, 0x00}, /*"1", 49(ASCII)*/
        {0x79, 0x79, 0x49, 0x49, 0x4F}, /*"2", 50(ASCII)*/
        {0x41, 0x49, 0x49, 0x7F, 0x7F}, /*"3", 51(ASCII)*/
        {0x0E, 0x08, 0x08, 0x7F, 0x7F}, /*"4", 52(ASCII)*/
        {0x4F, 0x49, 0x49, 0x79, 0x79}, /*"5", 53(ASCII)*/
        {0x7F, 0x49, 0x49, 0x79, 0x78}, /*"6", 54(ASCII)*/
        {0x01, 0x01, 0x01, 0x7F, 0x7F}, /*"7", 55(ASCII)*/
        {0x7F, 0x49, 0x49, 0x7F, 0x7F}, /*"8", 56(ASCII)*/
        {0x0F, 0x49, 0x49, 0x7F, 0x7F}, /*"9", 57(ASCII)*/
        {0x00, 0x36, 0x36, 0x00, 0x00}, /*":", 58(ASCII)*/
        {0x00, 0x00, 0x44, 0x44, 0x00}, /*";", 59(ASCII)*/
        {0x08, 0x1C, 0x36, 0x22, 0x00}, /*"<", 60(ASCII)*/
        {0x14, 0x14, 0x14, 0x14, 0x14}, /*"=", 61(ASCII)*/
        {0x00, 0x22, 0x36, 0x1C, 0x08}, /*">", 62(ASCII)*/
        {0x02, 0x03, 0x09, 0x0F, 0x06}, /*"?", 63(ASCII)*/
        {0x3E, 0x7F, 0x5F, 0x7F, 0x3E}, /*"@", 64(ASCII)*/
        {0x7C, 0x12, 0x11, 0x12, 0x7C}, /*"A", 65(ASCII)*/
        {0x41, 0x7F, 0x49, 0x49, 0x36}, /*"B", 66(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x22}, /*"C", 67(ASCII)*/
        {0x41, 0x7F, 0x41, 0x41, 0x3E}, /*"D", 68(ASCII)*/
        {0x7F, 0x49, 0x49, 0x49, 0x41}, /*"E", 69(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x01}, /*"F", 70(ASCII)*/
        {0x3E, 0x41, 0x49, 0x49, 0x3A}, /*"G", 71(ASCII)*/
        {0x7F, 0x08, 0x08, 0x08, 0x7F}, /*"H", 72(ASCII)*/
        {0x00, 0x41, 0x7F, 0x41, 0x00}, /*"I", 73(ASCII)*/
        {0x20, 0x40, 0x41, 0x7F, 0x01}, /*"J", 74(ASCII)*/
        {0x7F, 0x08, 0x14, 0x22, 0x41}, /*"K", 75(ASCII)*/
        {0x7F, 0x40, 0x40, 0x40, 0x40}, /*"L", 76(ASCII)*/
        {0x7F, 0x02, 0x0C, 0x02, 0x7F}, /*"M", 77(ASCII)*/
        {0x7F, 0x04, 0x08, 0x10, 0x7F}, /*"N", 78(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, /*"O", 79(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x06}, /*"P", 80(ASCII)*/
        {0x3E, 0x41, 0x51, 0x21, 0x5E}, /*"Q", 81(ASCII)*/
        {0x7F, 0x09, 0x19, 0x29, 0x46}, /*"R", 82(ASCII)*/
        {0x26, 0x49, 0x49, 0x49, 0x32}, /*"S", 83(ASCII)*/
        {0x01, 0x01, 0x7F, 0x01, 0x01}, /*"T", 84(ASCII)*/
        {0x3F, 0x40, 0x40, 0x40, 0x3F}, /*"U", 85(ASCII)*/
        {0x0F, 0x30, 0x40, 0x30, 0x0F}, /*"V", 86(ASCII)*/
        {0x7F, 0x20, 0x18, 0x20, 0x7F}, /*"W", 87(ASCII)*/
        {0x63, 0x14, 0x08, 0x14, 0x63}, /*"X", 88(ASCII)*/
        {0x07, 0x08, 0x70, 0x08, 0x07}, /*"Y", 89(ASCII)*/
        {0x61, 0x51, 0x49, 0x45, 0x43}, /*"Z", 90(ASCII)*/
        {0x00, 0x00, 0x7F, 0x7F, 0x00}, /*"[", 91(ASCII)*/
        {0x00, 0x0E, 0x7E, 0x70, 0x00}, /*"\", 92(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"]", 93(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"^", 94(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"_", 95(ASCII)*/
        {0x00, 0x01, 0x01, 0x00, 0x00}, /*"`", 96(ASCII)*/
        {0x20, 0x54, 0x54, 0x54, 0x78}, /*"a", 97(ASCII)*/
        {0x7F, 0x44, 0x44, 0x44, 0x38}, /*"b", 98(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x44}, /*"c", 99(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x7F}, /*"d", 100(ASCII)*/
        {0x38, 0x54, 0x54, 0x54, 0x58}, /*"e", 101(ASCII)*/
        {0x04, 0x04, 0x7E, 0x05, 0x05}, /*"f", 102(ASCII)*/
        {0x4C, 0x52, 0x52, 0x3C, 0x02}, /*"g", 103(ASCII)*/
        {0x7F, 0x08, 0x04, 0x04, 0x78}, /*"h", 104(ASCII)*/
        {0x00, 0x44, 0x7D, 0x40, 0x00}, /*"i", 105(ASCII)*/
        {0x20, 0x40, 0x44, 0x3D, 0x00}, /*"j", 106(ASCII)*/
        {0x00, 0x7F, 0x10, 0x28, 0x44}, /*"k", 107(ASCII)*/
        {0x00, 0x41, 0x7F, 0x40, 0x00}, /*"l", 108(ASCII)*/
        {0x7C, 0x04, 0x78, 0x04, 0x78}, /*"m", 109(ASCII)*/
        {0x7C, 0x08, 0x04, 0x04, 0x78}, /*"n", 110(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x38}, /*"o", 111(ASCII)*/
        {0x7C, 0x24, 0x24, 0x24, 0x18}, /*"p", 112(ASCII)*/
        {0x18, 0x24, 0x24, 0x24, 0x7C}, /*"q", 113(ASCII)*/
        {0x00, 0x7C, 0x08, 0x04, 0x04}, /*"r", 114(ASCII)*/
        {0x48, 0x54, 0x54, 0x54, 0x24}, /*"s", 115(ASCII)*/
        {0x00, 0x04, 0x3F, 0x44, 0x44}, /*"t", 116(ASCII)*/
        {0x3C, 0x40, 0x40, 0x20, 0x7C}, /*"u", 117(ASCII)*/
        {0x0C, 0x30, 0x40, 0x30, 0x0C}, /*"v", 118(ASCII)*/
        {0x7C, 0x20, 0x18, 0x20, 0x7C}, /*"w", 119(ASCII)*/
        {0x44, 0x28, 0x10, 0x28, 0x44}, /*"x", 120(ASCII)*/
        {0x0C, 0x50, 0x50, 0x50, 0x3C}, /*"y", 121(ASCII)*/
        {0x44, 0x64, 0x54, 0x4C, 0x44}, /*"z", 122(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"{", 123(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"|", 124(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"}", 125(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"~", 126(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"", 127(ASCII)*/

    };
    const uint8_t hex_codes_style5[CHAR_SIZE][5] = {
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*" ", 32(ASCII)*/
        {0x00, 0x00, 0x4F, 0x00, 0x00}, /*"!", 33(ASCII)*/
        {0x00, 0x03, 0x00, 0x03, 0x00}, /*""", 34(ASCII)*/
        {0x22, 0x7F, 0x22, 0x7F, 0x22}, /*"#", 35(ASCII)*/
        {0x24, 0x2A, 0x7F, 0x2A, 0x12}, /*"$", 36(ASCII)*/
        {0x23, 0x13, 0x08, 0x64, 0x62}, /*"%", 37(ASCII)*/
        {0x36, 0x49, 0x56, 0x20, 0x58}, /*"&", 38(ASCII)*/
        {0x00, 0x02, 0x01, 0x00, 0x00}, /*"'", 39(ASCII)*/
        {0x00, 0x1C, 0x22, 0x41, 0x00}, /*"(", 40(ASCII)*/
        {0x00, 0x41, 0x22, 0x1C, 0x00}, /*")", 41(ASCII)*/
        {0x14, 0x08, 0x3E, 0x08, 0x14}, /*"*", 42(ASCII)*/
        {0x08, 0x08, 0x3E, 0x08, 0x08}, /*"+", 43(ASCII)*/
        {0x00, 0x40, 0x20, 0x00, 0x00}, /*",", 44(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"-", 45(ASCII)*/
        {0x00, 0x40, 0x00, 0x00, 0x00}, /*".", 46(ASCII)*/
        {0x20, 0x10, 0x08, 0x04, 0x02}, /*"/", 47(ASCII)*/
        {0x7F, 0x7F, 0x41, 0x7F, 0x7F}, /*"0", 48(ASCII)*/
        {0x00, 0x06, 0x7F, 0x7F, 0x00}, /*"1", 49(ASCII)*/
        {0x79, 0x79, 0x49, 0x4F, 0x4F}, /*"2", 50(ASCII)*/
        {0x49, 0x49, 0x49, 0x7F, 0x7F}, /*"3", 51(ASCII)*/
        {0x0F, 0x0F, 0x08, 0x7F, 0x7F}, /*"4", 52(ASCII)*/
        {0x4F, 0x4F, 0x49, 0x79, 0x79}, /*"5", 53(ASCII)*/
        {0x7F, 0x7F, 0x49, 0x79, 0x78}, /*"6", 54(ASCII)*/
        {0x01, 0x01, 0x71, 0x7F, 0x0F}, /*"7", 55(ASCII)*/
        {0x7F, 0x7F, 0x49, 0x7F, 0x7F}, /*"8", 56(ASCII)*/
        {0x0F, 0x4F, 0x49, 0x7F, 0x7F}, /*"9", 57(ASCII)*/
        {0x00, 0x36, 0x36, 0x00, 0x00}, /*":", 58(ASCII)*/
        {0x00, 0x00, 0x44, 0x44, 0x00}, /*";", 59(ASCII)*/
        {0x08, 0x1C, 0x36, 0x22, 0x00}, /*"<", 60(ASCII)*/
        {0x14, 0x14, 0x14, 0x14, 0x14}, /*"=", 61(ASCII)*/
        {0x00, 0x22, 0x36, 0x1C, 0x08}, /*">", 62(ASCII)*/
        {0x02, 0x03, 0x09, 0x0F, 0x06}, /*"?", 63(ASCII)*/
        {0x3E, 0x7F, 0x5F, 0x7F, 0x3E}, /*"@", 64(ASCII)*/
        {0x7C, 0x12, 0x11, 0x12, 0x7C}, /*"A", 65(ASCII)*/
        {0x41, 0x7F, 0x49, 0x49, 0x36}, /*"B", 66(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x22}, /*"C", 67(ASCII)*/
        {0x41, 0x7F, 0x41, 0x41, 0x3E}, /*"D", 68(ASCII)*/
        {0x7F, 0x49, 0x49, 0x49, 0x41}, /*"E", 69(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x01}, /*"F", 70(ASCII)*/
        {0x3E, 0x41, 0x49, 0x49, 0x3A}, /*"G", 71(ASCII)*/
        {0x7F, 0x08, 0x08, 0x08, 0x7F}, /*"H", 72(ASCII)*/
        {0x00, 0x41, 0x7F, 0x41, 0x00}, /*"I", 73(ASCII)*/
        {0x20, 0x40, 0x41, 0x7F, 0x01}, /*"J", 74(ASCII)*/
        {0x7F, 0x08, 0x14, 0x22, 0x41}, /*"K", 75(ASCII)*/
        {0x7F, 0x40, 0x40, 0x40, 0x40}, /*"L", 76(ASCII)*/
        {0x7F, 0x02, 0x0C, 0x02, 0x7F}, /*"M", 77(ASCII)*/
        {0x7F, 0x04, 0x08, 0x10, 0x7F}, /*"N", 78(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, /*"O", 79(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x06}, /*"P", 80(ASCII)*/
        {0x3E, 0x41, 0x51, 0x21, 0x5E}, /*"Q", 81(ASCII)*/
        {0x7F, 0x09, 0x19, 0x29, 0x46}, /*"R", 82(ASCII)*/
        {0x26, 0x49, 0x49, 0x49, 0x32}, /*"S", 83(ASCII)*/
        {0x01, 0x01, 0x7F, 0x01, 0x01}, /*"T", 84(ASCII)*/
        {0x3F, 0x40, 0x40, 0x40, 0x3F}, /*"U", 85(ASCII)*/
        {0x0F, 0x30, 0x40, 0x30, 0x0F}, /*"V", 86(ASCII)*/
        {0x7F, 0x20, 0x18, 0x20, 0x7F}, /*"W", 87(ASCII)*/
        {0x63, 0x14, 0x08, 0x14, 0x63}, /*"X", 88(ASCII)*/
        {0x07, 0x08, 0x70, 0x08, 0x07}, /*"Y", 89(ASCII)*/
        {0x61, 0x51, 0x49, 0x45, 0x43}, /*"Z", 90(ASCII)*/
        {0x00, 0x00, 0x7F, 0x7F, 0x00}, /*"[", 91(ASCII)*/
        {0x00, 0x0E, 0x7E, 0x70, 0x00}, /*"\", 92(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"]", 93(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"^", 94(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"_", 95(ASCII)*/
        {0x00, 0x01, 0x01, 0x00, 0x00}, /*"`", 96(ASCII)*/
        {0x20, 0x54, 0x54, 0x54, 0x78}, /*"a", 97(ASCII)*/
        {0x7F, 0x44, 0x44, 0x44, 0x38}, /*"b", 98(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x44}, /*"c", 99(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x7F}, /*"d", 100(ASCII)*/
        {0x38, 0x54, 0x54, 0x54, 0x58}, /*"e", 101(ASCII)*/
        {0x04, 0x04, 0x7E, 0x05, 0x05}, /*"f", 102(ASCII)*/
        {0x4C, 0x52, 0x52, 0x3C, 0x02}, /*"g", 103(ASCII)*/
        {0x7F, 0x08, 0x04, 0x04, 0x78}, /*"h", 104(ASCII)*/
        {0x00, 0x44, 0x7D, 0x40, 0x00}, /*"i", 105(ASCII)*/
        {0x20, 0x40, 0x44, 0x3D, 0x00}, /*"j", 106(ASCII)*/
        {0x00, 0x7F, 0x10, 0x28, 0x44}, /*"k", 107(ASCII)*/
        {0x00, 0x41, 0x7F, 0x40, 0x00}, /*"l", 108(ASCII)*/
        {0x7C, 0x04, 0x78, 0x04, 0x78}, /*"m", 109(ASCII)*/
        {0x7C, 0x08, 0x04, 0x04, 0x78}, /*"n", 110(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x38}, /*"o", 111(ASCII)*/
        {0x7C, 0x24, 0x24, 0x24, 0x18}, /*"p", 112(ASCII)*/
        {0x18, 0x24, 0x24, 0x24, 0x7C}, /*"q", 113(ASCII)*/
        {0x00, 0x7C, 0x08, 0x04, 0x04}, /*"r", 114(ASCII)*/
        {0x48, 0x54, 0x54, 0x54, 0x24}, /*"s", 115(ASCII)*/
        {0x00, 0x04, 0x3F, 0x44, 0x44}, /*"t", 116(ASCII)*/
        {0x3C, 0x40, 0x40, 0x20, 0x7C}, /*"u", 117(ASCII)*/
        {0x0C, 0x30, 0x40, 0x30, 0x0C}, /*"v", 118(ASCII)*/
        {0x7C, 0x20, 0x18, 0x20, 0x7C}, /*"w", 119(ASCII)*/
        {0x44, 0x28, 0x10, 0x28, 0x44}, /*"x", 120(ASCII)*/
        {0x0C, 0x50, 0x50, 0x50, 0x3C}, /*"y", 121(ASCII)*/
        {0x44, 0x64, 0x54, 0x4C, 0x44}, /*"z", 122(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"{", 123(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"|", 124(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"}", 125(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"~", 126(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"", 127(ASCII)*/

    };
    const uint8_t hex_codes_style6[CHAR_SIZE][5] = {
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*" ", 32(ASCII)*/
        {0x00, 0x00, 0x4F, 0x00, 0x00}, /*"!", 33(ASCII)*/
        {0x00, 0x03, 0x00, 0x03, 0x00}, /*""", 34(ASCII)*/
        {0x22, 0x7F, 0x22, 0x7F, 0x22}, /*"#", 35(ASCII)*/
        {0x24, 0x2A, 0x7F, 0x2A, 0x12}, /*"$", 36(ASCII)*/
        {0x23, 0x13, 0x08, 0x64, 0x62}, /*"%", 37(ASCII)*/
        {0x36, 0x49, 0x56, 0x20, 0x58}, /*"&", 38(ASCII)*/
        {0x00, 0x02, 0x01, 0x00, 0x00}, /*"'", 39(ASCII)*/
        {0x00, 0x1C, 0x22, 0x41, 0x00}, /*"(", 40(ASCII)*/
        {0x00, 0x41, 0x22, 0x1C, 0x00}, /*")", 41(ASCII)*/
        {0x14, 0x08, 0x3E, 0x08, 0x14}, /*"*", 42(ASCII)*/
        {0x08, 0x08, 0x3E, 0x08, 0x08}, /*"+", 43(ASCII)*/
        {0x00, 0x40, 0x20, 0x00, 0x00}, /*",", 44(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"-", 45(ASCII)*/
        {0x00, 0x40, 0x00, 0x00, 0x00}, /*".", 46(ASCII)*/
        {0x20, 0x10, 0x08, 0x04, 0x02}, /*"/", 47(ASCII)*/
        {0x70, 0x5F, 0x41, 0x5F, 0x70}, /*"0", 48(ASCII)*/
        {0x40, 0x41, 0x7F, 0x40, 0x70}, /*"1", 49(ASCII)*/
        {0x71, 0x51, 0x51, 0x51, 0x5F}, /*"2", 50(ASCII)*/
        {0x40, 0x41, 0x51, 0x51, 0x7F}, /*"3", 51(ASCII)*/
        {0x1F, 0x10, 0x10, 0x10, 0x7E}, /*"4", 52(ASCII)*/
        {0x5F, 0x51, 0x51, 0x51, 0x70}, /*"5", 53(ASCII)*/
        {0x7F, 0x51, 0x51, 0x50, 0x70}, /*"6", 54(ASCII)*/
        {0x01, 0x01, 0x61, 0x11, 0x0F}, /*"7", 55(ASCII)*/
        {0x70, 0x5F, 0x51, 0x5F, 0x70}, /*"8", 56(ASCII)*/
        {0x1F, 0x11, 0x51, 0x51, 0x7F}, /*"9", 57(ASCII)*/
        {0x00, 0x36, 0x36, 0x00, 0x00}, /*":", 58(ASCII)*/
        {0x00, 0x00, 0x44, 0x44, 0x00}, /*";", 59(ASCII)*/
        {0x08, 0x1C, 0x36, 0x22, 0x00}, /*"<", 60(ASCII)*/
        {0x14, 0x14, 0x14, 0x14, 0x14}, /*"=", 61(ASCII)*/
        {0x00, 0x22, 0x36, 0x1C, 0x08}, /*">", 62(ASCII)*/
        {0x02, 0x03, 0x09, 0x0F, 0x06}, /*"?", 63(ASCII)*/
        {0x3E, 0x7F, 0x5F, 0x7F, 0x3E}, /*"@", 64(ASCII)*/
        {0x7C, 0x12, 0x11, 0x12, 0x7C}, /*"A", 65(ASCII)*/
        {0x41, 0x7F, 0x49, 0x49, 0x36}, /*"B", 66(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x22}, /*"C", 67(ASCII)*/
        {0x41, 0x7F, 0x41, 0x41, 0x3E}, /*"D", 68(ASCII)*/
        {0x7F, 0x49, 0x49, 0x49, 0x41}, /*"E", 69(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x01}, /*"F", 70(ASCII)*/
        {0x3E, 0x41, 0x49, 0x49, 0x3A}, /*"G", 71(ASCII)*/
        {0x7F, 0x08, 0x08, 0x08, 0x7F}, /*"H", 72(ASCII)*/
        {0x00, 0x41, 0x7F, 0x41, 0x00}, /*"I", 73(ASCII)*/
        {0x20, 0x40, 0x41, 0x7F, 0x01}, /*"J", 74(ASCII)*/
        {0x7F, 0x08, 0x14, 0x22, 0x41}, /*"K", 75(ASCII)*/
        {0x7F, 0x40, 0x40, 0x40, 0x40}, /*"L", 76(ASCII)*/
        {0x7F, 0x02, 0x0C, 0x02, 0x7F}, /*"M", 77(ASCII)*/
        {0x7F, 0x04, 0x08, 0x10, 0x7F}, /*"N", 78(ASCII)*/
        {0x3E, 0x41, 0x41, 0x41, 0x3E}, /*"O", 79(ASCII)*/
        {0x7F, 0x09, 0x09, 0x09, 0x06}, /*"P", 80(ASCII)*/
        {0x3E, 0x41, 0x51, 0x21, 0x5E}, /*"Q", 81(ASCII)*/
        {0x7F, 0x09, 0x19, 0x29, 0x46}, /*"R", 82(ASCII)*/
        {0x26, 0x49, 0x49, 0x49, 0x32}, /*"S", 83(ASCII)*/
        {0x01, 0x01, 0x7F, 0x01, 0x01}, /*"T", 84(ASCII)*/
        {0x3F, 0x40, 0x40, 0x40, 0x3F}, /*"U", 85(ASCII)*/
        {0x0F, 0x30, 0x40, 0x30, 0x0F}, /*"V", 86(ASCII)*/
        {0x7F, 0x20, 0x18, 0x20, 0x7F}, /*"W", 87(ASCII)*/
        {0x63, 0x14, 0x08, 0x14, 0x63}, /*"X", 88(ASCII)*/
        {0x07, 0x08, 0x70, 0x08, 0x07}, /*"Y", 89(ASCII)*/
        {0x61, 0x51, 0x49, 0x45, 0x43}, /*"Z", 90(ASCII)*/
        {0x00, 0x00, 0x7F, 0x7F, 0x00}, /*"[", 91(ASCII)*/
        {0x00, 0x0E, 0x7E, 0x70, 0x00}, /*"\", 92(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"]", 93(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"^", 94(ASCII)*/
        {0x08, 0x08, 0x08, 0x08, 0x08}, /*"_", 95(ASCII)*/
        {0x00, 0x01, 0x01, 0x00, 0x00}, /*"`", 96(ASCII)*/
        {0x20, 0x54, 0x54, 0x54, 0x78}, /*"a", 97(ASCII)*/
        {0x7F, 0x44, 0x44, 0x44, 0x38}, /*"b", 98(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x44}, /*"c", 99(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x7F}, /*"d", 100(ASCII)*/
        {0x38, 0x54, 0x54, 0x54, 0x58}, /*"e", 101(ASCII)*/
        {0x04, 0x04, 0x7E, 0x05, 0x05}, /*"f", 102(ASCII)*/
        {0x4C, 0x52, 0x52, 0x3C, 0x02}, /*"g", 103(ASCII)*/
        {0x7F, 0x08, 0x04, 0x04, 0x78}, /*"h", 104(ASCII)*/
        {0x00, 0x44, 0x7D, 0x40, 0x00}, /*"i", 105(ASCII)*/
        {0x20, 0x40, 0x44, 0x3D, 0x00}, /*"j", 106(ASCII)*/
        {0x00, 0x7F, 0x10, 0x28, 0x44}, /*"k", 107(ASCII)*/
        {0x00, 0x41, 0x7F, 0x40, 0x00}, /*"l", 108(ASCII)*/
        {0x7C, 0x04, 0x78, 0x04, 0x78}, /*"m", 109(ASCII)*/
        {0x7C, 0x08, 0x04, 0x04, 0x78}, /*"n", 110(ASCII)*/
        {0x38, 0x44, 0x44, 0x44, 0x38}, /*"o", 111(ASCII)*/
        {0x7C, 0x24, 0x24, 0x24, 0x18}, /*"p", 112(ASCII)*/
        {0x18, 0x24, 0x24, 0x24, 0x7C}, /*"q", 113(ASCII)*/
        {0x00, 0x7C, 0x08, 0x04, 0x04}, /*"r", 114(ASCII)*/
        {0x48, 0x54, 0x54, 0x54, 0x24}, /*"s", 115(ASCII)*/
        {0x00, 0x04, 0x3F, 0x44, 0x44}, /*"t", 116(ASCII)*/
        {0x3C, 0x40, 0x40, 0x20, 0x7C}, /*"u", 117(ASCII)*/
        {0x0C, 0x30, 0x40, 0x30, 0x0C}, /*"v", 118(ASCII)*/
        {0x7C, 0x20, 0x18, 0x20, 0x7C}, /*"w", 119(ASCII)*/
        {0x44, 0x28, 0x10, 0x28, 0x44}, /*"x", 120(ASCII)*/
        {0x0C, 0x50, 0x50, 0x50, 0x3C}, /*"y", 121(ASCII)*/
        {0x44, 0x64, 0x54, 0x4C, 0x44}, /*"z", 122(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"{", 123(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"|", 124(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"}", 125(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"~", 126(ASCII)*/
        {0x00, 0x00, 0x00, 0x00, 0x00}, /*"", 127(ASCII)*/

    };
#endif
    // Hexadecimal code corresponding to each character
    // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz
    const uint8_t num_hex_codes[CHAR_SIZE] = {
        0,
        0,    // !
        0,    // "
        0,    // #
        0,    // $
        0,    // %
        0,    // &
        0,    // '
        0,    // (
        0,    // )
        0x61, // *
        0,    // +
        0,    // ,
        0,    // -
        0,    // .
        0,    // /
        0x3f, // 0
        0x06, // 1
        0x5b, // 2
        0x4f, // 3
        0x66, // 4
        0x6d, // 5
        0x7d, // 6
        0x07, // 7
        0x7f, // 8
        0x6f, // 9
        0,    // :
        0,    // ;
        0,    // <
        0,    // =
        0,    // >
        0,    // ?
        0,    // @
        0x77, // A
        0x7c, // B
        0x39, // C
        0x5e, // D
        0x79, // E
        0x71, // F
        0x6f, // G
        0x76, // H
        0x06, // I
        0x0e, // J
        0x74, // K
        0x38, // L
        0x36, // M
        0x54, // N
        0x3f, // O
        0x73, // P
        0x67, // Q
        0x50, // R
        0x6d, // S
        0x78, // T
        0x3e, // U
        0x3e, // V
        0x36, // W
        0x76, // X
        0x6e, // Y
        0x5b  // Z
    };
    typedef enum
    {
        Max
    } Symbols;

    typedef enum
    {
        NONE = -1,
        CLOCKWISE,
        ANTICLOCKWISE,
        UP2DOWN,
        DOWN2UP,
        LEFT2RT,
        RT2LEFT,
        MAX
    } NumAni;

    typedef struct
    {
        char current_content;
        char last_content;
        int animation_step;
        NumAni animation_type;
        bool need_update;
    } ContentData;

#define BUFFER_SIZE 256
#define DISPLAY_SIZE 8
#define DOTS 20
    const float BALL_RADIUS = 1.0f;

    typedef struct
    {
        char buffer[BUFFER_SIZE + 1]; // +1 for null terminator
        int start_pos;
        int length;
    } CircularBuffer;

    HUV_13SS16T(gpio_num_t din, gpio_num_t clk, gpio_num_t cs, spi_host_device_t spi_num);
    HUV_13SS16T(spi_device_handle_t spi_device);
    void test();
    void setbrightness(uint8_t brightness);
    void setsleep(bool en);
    void noti_show(int start, const char *buf, int size, bool forceupdate = false, NumAni ani = LEFT2RT, int timeout = 2000);
    void liquid_pixels(float AcX, float AcY, float AcZ);
    void pixelhelper(int index, uint8_t *code);
    void time_blink();
    void set_fonttype(int index);
    void clear_point();
    void draw_point(int x, int y, uint8_t dot);

    using AcceCallback = void (*)(void *handle, float *raw_acce_x, float *raw_acce_y, float *raw_acce_z);
    void setAcceCallback(void *handle, AcceCallback callback)
    {
        handle_ = handle;
        acceCallback = callback;
    }
    void noti_show(const char *str, int timeout);
    void pixel_show(int start, const char *buf, int size, bool forceupdate = false, NumAni ani = LEFT2RT);

private:
    typedef struct
    {
        float x, y;
        float vx, vy;
        bool isBorder;
    } Ball;

    Ball balls[DOTS];
    float getRandomBounceLoss(float base, float range)
    {
        return base + (float)std::rand() / RAND_MAX * range;
    }
    AcceCallback acceCallback = nullptr;
    void *handle_ = nullptr;
#if USE_MUTI_FONTS
    const uint8_t (*const hex_codes_map[6])[5] = {hex_codes_style1, hex_codes_style2, hex_codes_style3,
                                                  hex_codes_style4, hex_codes_style5, hex_codes_style6};
    const uint8_t (*hex_codes)[5] = hex_codes_map[0];
#else
    const uint8_t (*hex_codes)[5] = hex_codes_style1;
#endif
    uint8_t dimming = 0;
    spi_device_handle_t spi_device_;
    int64_t content_inhibit_time = 0;
    ContentData currentPixelData[DISPLAY_SIZE] = {0};
    ContentData tempPixelData[DISPLAY_SIZE] = {0};
    uint8_t pixel_gram[5 * PIXEL_COUNT] = {0};
    uint8_t matrix_gram[MAX_X][MAX_Y] = {0};
    CircularBuffer *cb = new CircularBuffer();

    void init_task();
    void pixelanimate();
    void refrash();
    void display_buffer();
    void scroll_buffer();

    uint8_t contentgetpart(uint8_t raw, uint8_t before_raw, uint8_t mask);
    void write_data8(uint8_t *dat, int len);
    const uint8_t *find_pixel_hex_code(char ch);
    uint8_t find_num_hex_code(char ch);
    void initialize_points()
    {
        for (int i = 0; i < DOTS; i++)
        {
            balls[i].x = rand() % MAX_X;
            balls[i].y = rand() % MAX_Y;
            balls[i].vx = 0;
            balls[i].vy = 0;
        }
    }

protected:
    void pixel_write(int x, int y, const uint8_t *code, int len);
    void pixel_write(int x, int y, const char *ascii, int len);
    void matrix_write(const uint8_t *code);
    void icon_write(Symbols icon, bool en);
    void dimming_write(int val);

#define ROWS 10
#define COLS 9
#define MAX_LENGTH 10
#define SNAKE_BODY 1
#define FOOD_DOT 2
#define BLANK_DOT 0
    // 定义蛇的结构体
    typedef struct
    {
        int x;
        int y;
    } SnakeSegment;

    // 定义蛇的结构体
    typedef struct
    {
        SnakeSegment body[MAX_LENGTH];
        int length;
        int direction; // 0: 上, 1: 右, 2: 下, 3: 左
    } Snake;

    // 定义食物的结构体
    typedef struct
    {
        int x;
        int y;
    } Food;
    void initSnake(Snake *snake)
    {
        snake->length = 3;
        snake->body[0].x = 2;
        snake->body[0].y = 2;
        snake->body[1].x = 1;
        snake->body[1].y = 2;
        snake->body[2].x = 0;
        snake->body[2].y = 2;
        snake->direction = 1;
    }
    void initFood(Food *food, Snake *snake)
    {
        int valid;
        do
        {
            valid = 1;
            food->x = rand() % COLS;
            food->y = rand() % ROWS;
            for (int i = 0; i < snake->length; i++)
            {
                if (snake->body[i].x == food->x && snake->body[i].y == food->y)
                {
                    valid = 0;
                    break;
                }
            }
        } while (!valid);
    }
    // 打印游戏界面
    void printBoard(Snake *snake, Food *food)
    {
        // 先清空界面
        for (int y = 0; y < ROWS; y++)
        {
            for (int x = 0; x < COLS; x++)
            {
                draw_point(x, y, BLANK_DOT);
            }
        }

        // 绘制蛇
        for (int i = 0; i < snake->length; i++)
        {
            draw_point(snake->body[i].x, snake->body[i].y, SNAKE_BODY);
        }

        // 绘制食物
        draw_point(food->x, food->y, FOOD_DOT);
    }

    // 让蛇自动追踪食物
    void autoTrackFood(Snake *snake, Food *food)
    {
        int headX = snake->body[0].x;
        int headY = snake->body[0].y;

        if (headX < food->x && snake->direction != 3)
        {
            snake->direction = 1;
        }
        else if (headX > food->x && snake->direction != 1)
        {
            snake->direction = 3;
        }
        else if (headY < food->y && snake->direction != 0)
        {
            snake->direction = 2;
        }
        else if (headY > food->y && snake->direction != 2)
        {
            snake->direction = 0;
        }
    }
    // 移动蛇
    void moveSnake(Snake *snake)
    {
        for (int i = snake->length - 1; i > 0; i--)
        {
            snake->body[i].x = snake->body[i - 1].x;
            snake->body[i].y = snake->body[i - 1].y;
        }

        switch (snake->direction)
        {
        case 0:
            snake->body[0].y--;
            break;
        case 1:
            snake->body[0].x++;
            break;
        case 2:
            snake->body[0].y++;
            break;
        case 3:
            snake->body[0].x--;
            break;
        }
    }
    // 检查蛇是否吃到食物
    int checkEat(Snake *snake, Food *food)
    {
        if (snake->body[0].x == food->x && snake->body[0].y == food->y)
        {
            snake->length++;
            snake->body[snake->length - 1].x = snake->body[snake->length - 2].x;
            snake->body[snake->length - 1].y = snake->body[snake->length - 2].y;
            return 1;
        }
        return 0;
    }

    // 检查蛇是否撞到墙壁或自己
    int checkCollision(Snake *snake)
    {
        if (snake->body[0].x < 0 || snake->body[0].x >= COLS || snake->body[0].y < 0 || snake->body[0].y >= ROWS)
        {
            return 1;
        }
        for (int i = 1; i < snake->length; i++)
        {
            if (snake->body[0].x == snake->body[i].x && snake->body[0].y == snake->body[i].y)
            {
                return 1;
            }
        }
        return 0;
    }
    Snake snake;
    Food food;
};

#endif